<?php

/**
 * @file Contains CRM Reports module hooks
 */

use Drupal\rtod;
use Drupal\rtod\structure;

/**
 * Implements hook_menu()
 */
function rtod_menu() {
  $items['rttest'] = array(
    'title' => 'test',
    'page callback' => 'rtod_page_callback',
    'page arguments' => array(),
    'access arguments' => array('access crm reports'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_permission()
 */
/*function rtod_permission() {
  return array(
    'access crm reports' => array(
      'title' => 'Access CRM Reports page',
      'description' => 'Allows to use CRM Reports',
    ),
  );
}*/

/**
 * Implements hook_rtod_structure_handlers().
 */
function rtod_rtod_structure_handlers() {
  $handlers = array();

  return $handlers;
}

/**
 * Page callback.
 */
function rtod_page_callback() {
  $actual = _rtod_actualize_stored();
  $file = file_load($actual['stored-file'])->uri;
  #return print_r($file, TRUE);
  $actual_data = _rtod_parse_file($file);

  $efq = new EntityFieldQuery();
  $efq->entityCondition('entity_type', 'taxonomy_term');
  $efq->entityCondition('bundle', 'tour_operators');
  $results = $efq->execute();

  $tos = entity_load('taxonomy_term', array_keys($results['taxonomy_term']));

  foreach ($tos as $to) {
    // prepare stored data
    $code = $to->field_registration_number['und'][0]['value'];
    $fullname = $to->field_fullname['und'][0]['value'];
    $oldinn = '';
    if (isset($to->field_inn[LANGUAGE_NONE][0]['value'])) {
      $oldinn = $to->field_inn[LANGUAGE_NONE][0]['value'];
    }
    $oddata = NULL;

    // prepare opendata
    if (isset($actual_data[$code])) {
      $oddata = $actual_data[$code];
    }
    elseif (isset($actual_data[$fullname])) {
      $oddata = $actual_data[$fullname];
      // manage registry number changes
      $to->field_registration_number[LANGUAGE_NONE][0]['value'] = _rtod_get_property_array($oddata, 'number');
      taxonomy_term_save($to);
    }

    // check if opendata exists
    if ($oddata) {
      $inn = _rtod_get_property_array($oddata, 'inn');
      if ($oldinn != $inn) {
        $to->field_inn[LANGUAGE_NONE][0]['value'] = $inn;
        taxonomy_term_save($to);
      }
      #dpm($to, 'stored data');
//      dpm($actual_data[$code], 'actual data');
      // lookup differences
      _rtod_compare_data($to, $oddata);
    }
  }

  return 'asdf';
}

function _rtod_compare_data($tt, $csv) {
  $props = array(
    'fullname',
    'shortname',
    'fact_address',
    'site',
    'financial_security',
    'financial_guaranty_contr',
    'financial_guaranteer_name',
    'financial_guaranteer_addr',
    'financial_guaranteer_padd',
  );
  $messages = array();
  foreach ($props as $p) {
    $v1 = _rtod_get_property($tt, $p);
    $v2 = _rtod_get_property($csv, $p);
    if ($v1 !== $v2) {
      $l = levenshtein($v1, $v2);
      $ml = max(1, min(strlen($v1), strlen($v2)));
      if (100 * $l / $ml > 0) 
        $messages[$p . ' ' . number_format(100 * $l / $ml, 0)] = $v1 . "\n" . $v2;
    }
  }
  
  if ($messages) {
    dpm($messages, l($tt->name . ' редактировать', 'taxonomy/term/' . $tt->tid . '/edit'));
  }
}

function _rtod_get_property($data, $prop) {
  if (is_object($data)) {
    return str_replace('  ', ' ', trim(_rtod_get_property_object($data, $prop)));
  }
  if (is_array($data)) {
    return str_replace('  ', ' ', trim(_rtod_get_property_array($data, $prop)));
  }
  return '';
}

function _rtod_get_property_array($data, $prop) {
  switch ($prop) {
    case "number": return $data[0]; break;
    case "fullname": return $data[1]; break;
    case "shortname": return $data[2]; break;
    case "fact_address": return $data[3]; break;
#    case "post_address": return $data[4]; break;
    case "site": return $data[5]; break;
    case "inn": return $data[6]; break;
    case "financial_security":
      if ($data[12] == 1) {
        return 'договор страхования гражданской ответственности туроператора ' . number_format((int) str_replace(' ', '', $data[11]), 0, '.', ' ') . ' рублей';
      }
      elseif ($data[12] == 2) {
        return 'банковские гарантии исполнения обязательств';
      }
      else {
        return '';
      }
    break;
    case "financial_guaranty_contr":
      return sprintf("№ %s от %s\r\nСрок действия финансового обеспечения:	с %s по %s", $data[13], date('d/m/Y', $data[14]), date('d/m/Y', $data[15] - 364 * 86400), date('d/m/Y', $data[15]));
    break;
    case "financial_guaranteer_name": return $data[16]; break;
    case "financial_guaranteer_addr": return $data[17];break;
    case "financial_guaranteer_padd": return $data[18];break;
#    case "Scope of tour activities": break;
#    case "Number of the order Rostourism": break;
#    case "Date of the order Rostourism": break;
#    case "Number issued certificate": break;
  }
  return '';
}

function _rtod_get_property_object($data, $prop) {
    switch ($prop) {
      case "fullname": return $data->field_fullname['und'][0]['value']; break;
      case "shortname": return $data->field_shortname['und'][0]['value']; break;
      case "fact_address": return $data->field_fact_address['und'][0]['value']; break;
      case "site": return $data->field_site['und'][0]['value']; break;
      case "financial_security": return $data->field_financial_security['und'][0]['value']; break;
      case "financial_guaranty_contr": return $data->field_financial_guaranty_contr['und'][0]['value']; break;
      case "financial_guaranteer_name": return $data->field_financial_guaranteer_name['und'][0]['value']; break;
      case "financial_guaranteer_addr": return $data->field_financial_guaranteer_addr['und'][0]['value']; break;
      case "financial_guaranteer_padd": return $data->field_financial_guaranteer_padd['und'][0]['value']; break;
      case "inn": return $data->field_inn['und'][0]['value']; break;
    }
    return '';
}

/**
 * Parse OD passport, return formalized data.
 */
function _rtod_parse_passport() {
  $passport_url = 'http://opendata.russiatourism.ru/7708550300-ReestrRosturizm77B';
  $passport_meta_url = 'http://opendata.russiatourism.ru/7708550300-ReestrRosturizm77B/meta.csv';

  $data = FALSE;

  if ($path = libraries_get_path('easyrdf')) {
    require_once($path . '/lib/EasyRdf.php');

    $uri = $passport_url = 'http://opendata.russiatourism.ru/7708550300-ReestrRosturizm77B';

    EasyRdf_Namespace::set('dc', 'http://purl.org/dc/terms/');

    $graph = EasyRdf_Graph::newAndLoad($uri);
    if ($graph) {
      $passport = $graph->resource();

      $last_modified = $passport->get('dc:modified');
      $data_url = $passport
        ->get('dc:source')
        ->get('dc:hasPart')
        ->get('dc:source')
        ->__toString();

      $data = array(
        'data-url' => $data_url,
        'last-modified' => strtotime($last_modified),
      );
    }
  }
  else {
    $data = array(
  //    'data-url' => 'http://opendata.russiatourism.ru/7708550300-ReestrRosturizm77B/data-20140623-structure-20140617.csv',
      'data-url' => 'http://opendata.russiatourism.ru/7708550300-ReestrRosturizm77B/data-20140816-structure-20140617.csv',
      'last-modified' => mktime(0, 0, 0, 8, 16, 2014), //'20140623',
    );
  }

  return $data;
}

/**
 * Download data file and saves it as managed drupal file.
 */
function _rtod_download_file($url) {
  $file = file_save_data(file_get_contents($url));
  return $file->fid;
}

/**
 * Returns actual data. Actualizes stored if needed.
 */
function _rtod_actualize_stored() {
  $default = array('data-url' => '', 'last-modified' => 0);
  $stored = variable_get('rtod_data', $default);
  
  $remote = _rtod_parse_passport();
  
  if ($remote['last-modified'] > $stored['last-modified']) {
    if (!empty($stored['stored-file'])) {
      $oldfile = file_load($stored['stored-file']);
      file_delete($oldfile);
    }
    $stored = $remote;
    $stored['stored-file'] = _rtod_download_file($remote['data-url']);
    variable_set('rtod_data', $stored);
  }
  
  return $stored;
}

function _rtod_parse_file($file) {
  $data = array();
  file_get_contents($file);
  $handle = fopen($file, 'r');
  while (($_data = fgetcsv($handle)) !== FALSE) {
    if (!empty($_data[0])) {
      if ($_data[0] === 'D1') continue;
      if (isset($data[$_data[0]])) {
        drupal_set_message('Duplicated code for ' . $_data[1] . ' and ' . $data[$_data[0]][1]);
        #dpm($_data);
        #dpm($data[$_data[0]]);
      }
      $data[$_data[0]] = $_data;
      $data[$_data[1]] = $_data;
    }
    else {
      drupal_set_message('Missed code');
    }
  }

  return $data;
}

function _rtod_lookup_date() {
  
}